        -:    0:Source:unittest3.c
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 88%
        1:    9:int main (){
        -:   10://int minion_function(int choice1, int choice2, int j, struct gameState *state, int handPos, int currentPlayer){
        1:   11:int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, j = 0;
        -:   12:struct gameState G, testG;
        1:   13:int numPlayers = 2;
        1:   14:int seed = 1000;
        1:   15:int k[10] = {copper, gold, silver, minion, mine, cutpurse,
        -:   16:			sea_hag, tribute, smithy, council_room};
        1:   17:initializeGame(numPlayers, k, seed, &G);
call    0 returned 1
        1:   18:choice2 = 2;
        1:   19:memcpy(&testG, &G, sizeof(struct gameState));
        -:   20:
        1:   21:printf("%s", "This is the test for the minion card\n");
call    0 returned 1
        -:   22:
        -:   23://first test to see if the actions are correctly implemented
        1:   24:minion_function(1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        1:   25:if (testG.numActions == ++G.numActions){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   26:    printf("%s", "The number of actions was incremented correctly.\n");
call    0 returned 1
        -:   27:}
        -:   28:else {
    #####:   29:    printf("%s", "The number of actions was not incremented correctly.\n");
call    0 never executed
        -:   30:
        -:   31:}
        -:   32:
        1:   33:return 0;
        -:   34:}
