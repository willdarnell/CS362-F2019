        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTCARD "mine"
        -:   10:
function main called 1 returned 100% blocks executed 92%
        1:   11:int main () {
        -:   12:
        -:   13://int mine(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int j, int currentPlayer){
        1:   14:int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, j = 0;
        -:   15:int return_number;
        -:   16://setting up the test case taken from the example
        -:   17:struct gameState G, testG;
        1:   18:int numPlayers = 2;
        1:   19:int seed = 1000;
        1:   20:int k[10] = {copper, gold, silver, minion, mine, cutpurse,
        -:   21:			sea_hag, tribute, smithy, council_room};
        1:   22:initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   23:choice2 = 5;
        1:   24:memcpy(&testG, &G, sizeof(struct gameState));
        -:   25:
        1:   26:printf("%s", "This is the test for the mine card\n");
call    0 returned 100%
        1:   27:return_number = mine_function(choice1, choice2, choice3, &testG, handpos, bonus, j, 0);
call    0 returned 100%
        1:   28:if ((G.hand[0][0] == copper) && (getCost(G.hand[0][0]) + 3 <= getCost(choice2))){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:   29:    if (return_number == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   30:        printf("%s", "the function executed when it should\n");
call    0 never executed
        -:   31:    }
        -:   32:    else{
        1:   33:        printf("%s", "the function failed when it shouldn't\n");
call    0 returned 100%
        -:   34:    }
        -:   35:}
        -:   36:
        -:   37:
        -:   38:
        -:   39:
        -:   40:
        -:   41:
        1:   42:return 0;
        -:   43:
        -:   44:}
