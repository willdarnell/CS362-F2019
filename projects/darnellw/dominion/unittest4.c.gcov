        -:    0:Source:unittest4.c
        -:    0:Programs:2
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10://this is the unit test for the ambassador function
function main called 1 returned 100% blocks executed 77%
        1:   11:int main () {
        -:   12://int ambassador_function(int choice1, int choice2, int j, int handPos, struct gameState *state, int currentPlayer){
        -:   13:
        1:   14:int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, j = 0;
        -:   15:
        1:   16:int currentPlayer = 0;
        -:   17://setting up the test case taken from the example
        -:   18:struct gameState G, testG;
        1:   19:int numPlayers = 2;
        1:   20:int seed = 1000;
        1:   21:int k[10] = {ambassador, gold, silver, minion, mine, cutpurse,
        -:   22:			sea_hag, tribute, smithy, council_room};
        1:   23:initializeGame(numPlayers, k, seed, &G);
call    0 returned 1
        1:   24:memcpy(&testG, &G, sizeof(struct gameState));
        1:   25:testG.hand[0][1] = smithy;
        1:   26:testG.hand[0][2] = smithy;
        1:   27:testG.hand[0][3] = smithy;
        1:   28:testG.hand[0][4] = smithy;
        -:   29:
        1:   30:choice1 = 1;
        1:   31:choice2 = 2;
        1:   32:int before_call = (testG.supplyCount[testG.hand[currentPlayer][choice1]]) += choice2;
        1:   33:ambassador_function(choice1, choice2, j, handpos, &testG, currentPlayer);
call    0 returned 1
        1:   34:printf("%s""%d", "THIS IS THE SUPPLY BEFORE THE CALL and BEFORE ADDING TWO: ", testG.supplyCount[testG.hand[currentPlayer][choice1]]);
call    0 returned 1
        1:   35:printf("%s", "\n");
call    0 returned 1
        -:   36:
        -:   37://the first test will check to see if the supply of the revealed card is increased by 2, but will also find the first
        -:   38://bug which will cause the program to exit with any choice for choice2, so that is now commented out.
        1:   39:if ((testG.supplyCount[testG.hand[currentPlayer][choice1]]) == (before_call)){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   40:	printf("%s""%d", "The correct number of choice1 cards were added to the supply.", before_call);
call    0 returned 1
        1:   41:	printf("%s", "\n");
call    0 returned 1
        1:   42:	printf("%d", testG.supplyCount[testG.hand[currentPlayer][choice1]]);
call    0 returned 1
        -:   43:}
        -:   44:else {
    #####:   45:		printf("%s", "The incorrect number of choice1 cards were added to the supply.\n");
call    0 never executed
        -:   46:
        -:   47:}
        -:   48:
        -:   49://the same test with only one card chosen to discard successfully increases the supply by choice2 and then 
        1:   50://decrements it for each other player, making it net zero.
        1:   51:memcpy(&testG, &G, sizeof(struct gameState));
        1:   52:choice2 = 1;
        1:   53:before_call = (testG.supplyCount[testG.hand[currentPlayer][choice1]]) += choice2;
call    0 returned 1
        1:   54:ambassador_function(choice1, choice2, j, handpos, &testG, currentPlayer);
call    0 returned 1
        1:   55:printf("%s""%d", "THIS IS THE SUPPLY BEFORE THE CALL and BEFORE ADDING TWO: ", testG.supplyCount[testG.hand[currentPlayer][choice1]]);
call    0 returned 1
        -:   56:	printf("%s", "\n");
        1:   57:
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   58:if (testG.supplyCount[testG.hand[currentPlayer][choice1]] == (before_call)){
call    0 never executed
    #####:   59:	printf("%s""%d", "The correct number of choice1 cards were added to the supply.", before_call);
call    0 never executed
    #####:   60:	printf("%s", "\n");
call    0 never executed
    #####:   61:	printf("%d", testG.supplyCount[testG.hand[currentPlayer][choice1]]);
call    0 never executed
        -:   62:		printf("%s", "\n");
        -:   63:
        -:   64:}
        1:   65:else {
call    0 returned 1
        1:   66:	printf("%s""%d", "The incorrect number of choice1 cards were added to the supply.", before_call);
call    0 returned 1
        1:   67:	printf("%s", "\n");
call    0 returned 1
        -:   68:	printf("%d", testG.supplyCount[testG.hand[currentPlayer][choice1]]);
        -:   69:
        -:   70:}
        1:   71:
        -:   72:return 0;
        -:   73:}
