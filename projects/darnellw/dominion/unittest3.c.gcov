        -:    0:Source:unittest3.c
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 87%
        1:    9:int main (){
        -:   10://int minion_function(int choice1, int choice2, int j, struct gameState *state, int handPos, int currentPlayer){
        1:   11:int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, j = 0;
        -:   12:struct gameState G, testG;
        1:   13:int numPlayers = 2;
        1:   14:int thisPlayer = 1;
        1:   15:int seed = 1000;
        1:   16:int k[10] = {copper, gold, silver, minion, mine, cutpurse,
        -:   17:			sea_hag, tribute, smithy, council_room};
        1:   18:initializeGame(numPlayers, k, seed, &G);
call    0 returned 1
        1:   19:choice2 = 2;
        1:   20:memcpy(&testG, &G, sizeof(struct gameState));
        -:   21:
        1:   22:printf("%s", "This is the test for the minion card.\n");
call    0 returned 1
        -:   23:
        -:   24://first test to see if the actions are correctly implemented
        1:   25:minion_function(choice1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        1:   26:if (testG.numActions == ++G.numActions){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   27:    printf("%s", "The number of actions was incremented correctly.\n");
call    0 returned 1
        1:   28:    printf("%d", testG.handCount[1]);
call    0 returned 1
        -:   29:}
        -:   30:else {
    #####:   31:    printf("%s", "The number of actions was not incremented correctly.\n");
call    0 never executed
        -:   32:
        -:   33:}
        1:   34:testG.handCount[1] = 8;
        1:   35:printf("%d", testG.handCount[1]);
call    0 returned 1
        1:   36:minion_function(choice1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        -:   37:
        -:   38:
        -:   39:
        -:   40:
        -:   41:
        -:   42:
        -:   43:
        -:   44://change the decision to take the coins
        1:   45:choice1 = 1;
        1:   46:minion_function(choice1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        -:   47://second test to see if the coins is increased by 2 if the first choice is taken, which reveals the first bug
        -:   48://that I added for the minion function. This test fails because I changed the conditional to not increment the coins.
        1:   49:if (testG.coins == (G.coins + 2)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   50:    printf("%s", "The number of coins was increased correctly.\n");
call    0 never executed
        -:   51:}
        -:   52:else {
        1:   53:    printf("%s", "The number of coins was not increased correctly.\n");
call    0 returned 1
        -:   54:
        -:   55:}
        -:   56:
        1:   57:return 0;
        -:   58:}
