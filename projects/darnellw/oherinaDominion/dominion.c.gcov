        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <stdbool.h>
        -:    8:
function compare called 30 returned 100% blocks executed 83%
       30:    9:int compare(const void* a, const void* b) {
       30:   10:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:        return 1;
       30:   12:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   13:        return -1;
       22:   14:    return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:    return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
        -:   36:}
        -:   37:
function initializeGame called 1 returned 100% blocks executed 83%
        1:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:
        -:   44:    //set up random number generator
        1:   45:    SelectStream(1);
call    0 returned 100%
        1:   46:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        1:   49:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:        return -1;
        -:   52:    }
        -:   53:
        -:   54:    //set number of players
        1:   55:    state->numPlayers = numPlayers;
        -:   56:
        -:   57:    //check selected kingdom cards are different
       11:   58:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
      110:   60:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
      100:   62:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:            {
    #####:   64:                return -1;
        -:   65:            }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:    //initialize supply
        -:   71:    ///////////////////////////////
        -:   72:
        -:   73:    //set number of Curse cards
        1:   74:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
        1:   76:        state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:        state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:    else
        -:   83:    {
    #####:   84:        state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:    //set number of Victory cards
        1:   88:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
        1:   90:        state->supplyCount[estate] = 8;
        1:   91:        state->supplyCount[duchy] = 8;
        1:   92:        state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:    else
        -:   95:    {
    #####:   96:        state->supplyCount[estate] = 12;
    #####:   97:        state->supplyCount[duchy] = 12;
    #####:   98:        state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:    //set number of Treasure cards
        1:  102:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:    state->supplyCount[silver] = 40;
        1:  104:    state->supplyCount[gold] = 30;
        -:  105:
        -:  106:    //set number of Kingdom cards
       21:  107:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
      182:  109:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  110:        {
      170:  111:            if (kingdomCards[j] == i)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  112:            {
        -:  113:                //check if card is a 'Victory' Kingdom card
        8:  114:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  115:                {
    #####:  116:                    if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  117:                        state->supplyCount[i] = 8;
        -:  118:                    }
        -:  119:                    else {
    #####:  120:                        state->supplyCount[i] = 12;
        -:  121:                    }
        -:  122:                }
        -:  123:                else
        -:  124:                {
        8:  125:                    state->supplyCount[i] = 10;
        -:  126:                }
        8:  127:                break;
        -:  128:            }
        -:  129:            else    //card is not in the set choosen for the game
        -:  130:            {
      162:  131:                state->supplyCount[i] = -1;
        -:  132:            }
        -:  133:        }
        -:  134:
        -:  135:    }
        -:  136:
        -:  137:    ////////////////////////
        -:  138:    //supply intilization complete
        -:  139:
        -:  140:    //set player decks
        3:  141:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  142:    {
        2:  143:        state->deckCount[i] = 0;
        8:  144:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  145:        {
        6:  146:            state->deck[i][j] = estate;
        6:  147:            state->deckCount[i]++;
        -:  148:        }
       16:  149:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  150:        {
       14:  151:            state->deck[i][j] = copper;
       14:  152:            state->deckCount[i]++;
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:    //shuffle player decks
        3:  157:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  158:    {
        2:  159:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  160:        {
    #####:  161:            return -1;
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:    //draw player hands
        3:  166:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  167:    {
        -:  168:        //initialize hand size to zero
        2:  169:        state->handCount[i] = 0;
        2:  170:        state->discardCount[i] = 0;
        -:  171:        //draw 5 cards
        -:  172:        // for (j = 0; j < 5; j++)
        -:  173:        //	{
        -:  174:        //	  drawCard(i, state);
        -:  175:        //	}
        -:  176:    }
        -:  177:
        -:  178:    //set embargo tokens to 0 for all supply piles
       28:  179:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  180:    {
       27:  181:        state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:    //initialize first player's turn
        1:  185:    state->outpostPlayed = 0;
        1:  186:    state->phase = 0;
        1:  187:    state->numActions = 1;
        1:  188:    state->numBuys = 1;
        1:  189:    state->playedCardCount = 0;
        1:  190:    state->whoseTurn = 0;
        1:  191:    state->handCount[state->whoseTurn] = 0;
        -:  192:    //int it; move to top
        -:  193:
        -:  194:    //Moved draw cards to here, only drawing at the start of a turn
        6:  195:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  196:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  197:    }
        -:  198:
        1:  199:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  200:
        1:  201:    return 0;
        -:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 94%
        2:  204:int shuffle(int player, struct gameState *state) {
        -:  205:
        -:  206:
        -:  207:    int newDeck[MAX_DECK];
        2:  208:    int newDeckPos = 0;
        -:  209:    int card;
        -:  210:    int i;
        -:  211:
        2:  212:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:        return -1;
        2:  214:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  215:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       24:  217:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  218:        card = Random() * state->deckCount[player];
call    0 returned 100%
       20:  219:        newDeck[newDeckPos] = state->deck[player][card];
       20:  220:        newDeckPos++;
       70:  221:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  222:            state->deck[player][i] = state->deck[player][i+1];
        -:  223:        }
       20:  224:        state->deckCount[player]--;
        -:  225:    }
       22:  226:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  227:        state->deck[player][i] = newDeck[i];
       20:  228:        state->deckCount[player]++;
        -:  229:    }
        -:  230:
        2:  231:    return 0;
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  235:{
        -:  236:    int card;
    #####:  237:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:    //check if it is the right phase
    #####:  240:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:        return -1;
        -:  243:    }
        -:  244:
        -:  245:    //check if player has enough actions
    #####:  246:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //get card played
    #####:  252:    card = handCard(handPos, state);
call    0 never executed
        -:  253:
        -:  254:    //check if selected card is an action
    #####:  255:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:        return -1;
        -:  258:    }
        -:  259:
        -:  260:    //play card
    #####:  261:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //reduce number of actions
    #####:  267:    state->numActions--;
        -:  268:
        -:  269:    //update coins (Treasure cards may be added with card draws)
    #####:  270:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  271:
    #####:  272:    return 0;
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:    int who;
        -:  277:    if (DEBUG) {
        -:  278:        printf("Entering buyCard...\n");
        -:  279:    }
        -:  280:
        -:  281:    // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:    who = state->whoseTurn;
        -:  284:
    #####:  285:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  286:        if (DEBUG)
        -:  287:            printf("You do not have any buys left\n");
    #####:  288:        return -1;
    #####:  289:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:        if (DEBUG)
        -:  291:            printf("There are not any of that type of card left\n");
    #####:  292:        return -1;
    #####:  293:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:        if (DEBUG)
        -:  295:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:        return -1;
        -:  297:    } else {
    #####:  298:        state->phase=1;
        -:  299:        //state->supplyCount[supplyPos]--;
    #####:  300:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:
    #####:  302:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:        state->numBuys--;
        -:  304:        if (DEBUG)
        -:  305:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:    }
        -:  307:
        -:  308:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:    //state->discardCount[who]++;
        -:  310:
    #####:  311:    return 0;
        -:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:    return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  323:int supplyCount(int card, struct gameState *state) {
        2:  324:    return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:    int i;
    #####:  329:    int count = 0;
        -:  330:
    #####:  331:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:    }
        -:  335:
    #####:  336:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:    }
        -:  340:
    #####:  341:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:    return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  349:int whoseTurn(struct gameState *state) {
    #####:  350:    return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:    int k;
        -:  355:    int i;
    #####:  356:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  357:
        -:  358:    //Discard hand
    #####:  359:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  360:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:    }
    #####:  363:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:    //Code for determining the player
    #####:  366:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  367:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:    }
        -:  369:    else {
    #####:  370:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:    }
        -:  372:
    #####:  373:    state->outpostPlayed = 0;
    #####:  374:    state->phase = 0;
    #####:  375:    state->numActions = 1;
    #####:  376:    state->coins = 0;
    #####:  377:    state->numBuys = 1;
    #####:  378:    state->playedCardCount = 0;
    #####:  379:    state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:    //int k; move to top
        -:  382:    //Next player draws hand
    #####:  383:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  384:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  385:    }
        -:  386:
        -:  387:    //Update money
    #####:  388:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  389:
    #####:  390:    return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:    int i;
        -:  395:    int j;
        -:  396:
        -:  397:    //if stack of Province cards is empty, the game ends
    #####:  398:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:        return 1;
        -:  401:    }
        -:  402:
        -:  403:    //if three supply pile are at 0, the game ends
    #####:  404:    j = 0;
    #####:  405:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:        {
    #####:  409:            j++;
        -:  410:        }
        -:  411:    }
    #####:  412:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:        return 1;
        -:  415:    }
        -:  416:
    #####:  417:    return 0;
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:    int i;
    #####:  423:    int score = 0;
        -:  424:    //score from hand
    #####:  425:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  428:            score = score - 1;
        -:  429:        };
    #####:  430:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  431:            score = score + 1;
        -:  432:        };
    #####:  433:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  434:            score = score + 3;
        -:  435:        };
    #####:  436:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  437:            score = score + 6;
        -:  438:        };
    #####:  439:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  440:            score = score + 1;
        -:  441:        };
    #####:  442:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  443:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  444:        };
        -:  445:    }
        -:  446:
        -:  447:    //score from discard
    #####:  448:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:    {
    #####:  450:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  451:            score = score - 1;
        -:  452:        };
    #####:  453:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  454:            score = score + 1;
        -:  455:        };
    #####:  456:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  457:            score = score + 3;
        -:  458:        };
    #####:  459:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  460:            score = score + 6;
        -:  461:        };
    #####:  462:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  463:            score = score + 1;
        -:  464:        };
    #####:  465:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  466:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  467:        };
        -:  468:    }
        -:  469:
        -:  470:    //score from deck
    #####:  471:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
    #####:  473:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  474:            score = score - 1;
        -:  475:        };
    #####:  476:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  477:            score = score + 1;
        -:  478:        };
    #####:  479:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  480:            score = score + 3;
        -:  481:        };
    #####:  482:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  483:            score = score + 6;
        -:  484:        };
    #####:  485:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  486:            score = score + 1;
        -:  487:        };
    #####:  488:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  489:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  490:        };
        -:  491:    }
        -:  492:
    #####:  493:    return score;
        -:  494:}
        -:  495:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  496:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  497:    int i;
        -:  498:    int j;
        -:  499:    int highScore;
        -:  500:    int currentPlayer;
        -:  501:
        -:  502:    //get score for each player
    #####:  503:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
        -:  505:        //set unused player scores to -9999
    #####:  506:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  507:        {
    #####:  508:            players[i] = -9999;
        -:  509:        }
        -:  510:        else
        -:  511:        {
    #####:  512:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  513:        }
        -:  514:    }
        -:  515:
        -:  516:    //find highest score
    #####:  517:    j = 0;
    #####:  518:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  519:    {
    #####:  520:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  521:        {
    #####:  522:            j = i;
        -:  523:        }
        -:  524:    }
    #####:  525:    highScore = players[j];
        -:  526:
        -:  527:    //add 1 to players who had less turns
    #####:  528:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  529:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  530:    {
    #####:  531:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  532:        {
    #####:  533:            players[i]++;
        -:  534:        }
        -:  535:    }
        -:  536:
        -:  537:    //find new highest score
    #####:  538:    j = 0;
    #####:  539:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  540:    {
    #####:  541:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  542:        {
    #####:  543:            j = i;
        -:  544:        }
        -:  545:    }
    #####:  546:    highScore = players[j];
        -:  547:
        -:  548:    //set winners in array to 1 and rest to 0
    #####:  549:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  550:    {
    #####:  551:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  552:        {
    #####:  553:            players[i] = 1;
        -:  554:        }
        -:  555:        else
        -:  556:        {
    #####:  557:            players[i] = 0;
        -:  558:        }
        -:  559:    }
        -:  560:
    #####:  561:    return 0;
        -:  562:}
        -:  563:
function drawCard called 5 returned 100% blocks executed 38%
        5:  564:int drawCard(int player, struct gameState *state)
        -:  565:{   int count;
        -:  566:    int deckCounter;
        5:  567:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  568:
        -:  569:        //Step 1 Shuffle the discard pile back into a deck
        -:  570:        int i;
        -:  571:        //Move discard to deck
    #####:  572:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  573:            state->deck[player][i] = state->discard[player][i];
    #####:  574:            state->discard[player][i] = -1;
        -:  575:        }
        -:  576:
    #####:  577:        state->deckCount[player] = state->discardCount[player];
    #####:  578:        state->discardCount[player] = 0;//Reset discard
        -:  579:
        -:  580:        //Shufffle the deck
    #####:  581:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  582:
        -:  583:        if (DEBUG) { //Debug statements
        -:  584:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  585:        }
        -:  586:
    #####:  587:        state->discardCount[player] = 0;
        -:  588:
        -:  589:        //Step 2 Draw Card
    #####:  590:        count = state->handCount[player];//Get current player's hand count
        -:  591:
        -:  592:        if (DEBUG) { //Debug statements
        -:  593:            printf("Current hand count: %d\n", count);
        -:  594:        }
        -:  595:
    #####:  596:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  597:
    #####:  598:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  599:            return -1;
        -:  600:
    #####:  601:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  602:        state->deckCount[player]--;
    #####:  603:        state->handCount[player]++;//Increment hand count
        -:  604:    }
        -:  605:
        -:  606:    else {
        5:  607:        int count = state->handCount[player];//Get current hand count for player
        -:  608:        int deckCounter;
        -:  609:        if (DEBUG) { //Debug statements
        -:  610:            printf("Current hand count: %d\n", count);
        -:  611:        }
        -:  612:
        5:  613:        deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  614:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  615:        state->deckCount[player]--;
        5:  616:        state->handCount[player]++;//Increment hand count
        -:  617:    }
        -:  618:
        5:  619:    return 0;
        -:  620:}
        -:  621:
function getCost called 0 returned 0% blocks executed 0%
    #####:  622:int getCost(int cardNumber)
        -:  623:{
    #####:  624:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  625:    {
        -:  626:    case curse:
    #####:  627:        return 0;
        -:  628:    case estate:
    #####:  629:        return 2;
        -:  630:    case duchy:
    #####:  631:        return 5;
        -:  632:    case province:
    #####:  633:        return 8;
        -:  634:    case copper:
    #####:  635:        return 0;
        -:  636:    case silver:
    #####:  637:        return 3;
        -:  638:    case gold:
    #####:  639:        return 6;
        -:  640:    case adventurer:
    #####:  641:        return 6;
        -:  642:    case council_room:
    #####:  643:        return 5;
        -:  644:    case feast:
    #####:  645:        return 4;
        -:  646:    case gardens:
    #####:  647:        return 4;
        -:  648:    case mine:
    #####:  649:        return 5;
        -:  650:    case remodel:
    #####:  651:        return 4;
        -:  652:    case smithy:
    #####:  653:        return 4;
        -:  654:    case village:
    #####:  655:        return 3;
        -:  656:    case baron:
    #####:  657:        return 4;
        -:  658:    case great_hall:
    #####:  659:        return 3;
        -:  660:    case minion:
    #####:  661:        return 5;
        -:  662:    case steward:
    #####:  663:        return 3;
        -:  664:    case tribute:
    #####:  665:        return 5;
        -:  666:    case ambassador:
    #####:  667:        return 3;
        -:  668:    case cutpurse:
    #####:  669:        return 4;
        -:  670:    case embargo:
    #####:  671:        return 2;
        -:  672:    case outpost:
    #####:  673:        return 5;
        -:  674:    case salvager:
    #####:  675:        return 4;
        -:  676:    case sea_hag:
    #####:  677:        return 4;
        -:  678:    case treasure_map:
    #####:  679:        return 4;
        -:  680:    }
        -:  681:
    #####:  682:    return -1;
        -:  683:}
        -:  684:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  685:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  686:{
        -:  687:    int i;
        -:  688:    int j;
        -:  689:    int k;
        -:  690:    int x;
        -:  691:    int index;
    #####:  692:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  693:    int nextPlayer = currentPlayer + 1;
        -:  694:
        -:  695:    //int tributeRevealedCards[2] = {-1, -1};
        -:  696:    int temphand[MAX_HAND];// moved above the if statement
    #####:  697:    int drawntreasure=0;
        -:  698:    int cardDrawn;
    #####:  699:    int z = 0;// this is the counter for the temp hand
    #####:  700:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  701:        nextPlayer = 0;
        -:  702:    }
        -:  703:
        -:  704:
        -:  705:    //uses switch to select card and perform actions
    #####:  706:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  707:    {
        -:  708:    case adventurer:
    #####:  709:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  710:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  711:                shuffle(currentPlayer, state);
call    0 never executed
        -:  712:            }
    #####:  713:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  714:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  715:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  716:                drawntreasure++;
        -:  717:            else {
    #####:  718:                temphand[z]=cardDrawn;
    #####:  719:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  720:                z++;
        -:  721:            }
        -:  722:        }
    #####:  723:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  724:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  725:            z=z-1;
        -:  726:        }
    #####:  727:        return 0;
        -:  728:
        -:  729:    case council_room:
        -:  730:        //+4 Cards
    #####:  731:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  732:        {
    #####:  733:            drawCard(currentPlayer, state);
call    0 never executed
        -:  734:        }
        -:  735:
        -:  736:        //+1 Buy
    #####:  737:        state->numBuys++;
        -:  738:
        -:  739:        //Each other player draws a card
    #####:  740:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  741:        {
    #####:  742:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  743:            {
    #####:  744:                drawCard(i, state);
call    0 never executed
        -:  745:            }
        -:  746:        }
        -:  747:
        -:  748:        //put played card in played card pile
    #####:  749:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  750:
    #####:  751:        return 0;
        -:  752:
        -:  753:    case feast:
        -:  754:        //gain card with cost up to 5
        -:  755:        //Backup hand
    #####:  756:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  757:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  758:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  759:        }
        -:  760:        //Backup hand
        -:  761:
        -:  762:        //Update Coins for Buy
    #####:  763:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  764:        x = 1;//Condition to loop on
    #####:  765:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  766:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  767:                if (DEBUG)
        -:  768:                    printf("None of that card left, sorry!\n");
        -:  769:
        -:  770:                if (DEBUG) {
        -:  771:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  772:                }
        -:  773:            }
    #####:  774:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  775:                printf("That card is too expensive!\n");
call    0 never executed
        -:  776:
        -:  777:                if (DEBUG) {
        -:  778:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  779:                }
        -:  780:            }
        -:  781:            else {
        -:  782:
        -:  783:                if (DEBUG) {
        -:  784:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  785:                }
        -:  786:
    #####:  787:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  788:                x = 0;//No more buying cards
        -:  789:
        -:  790:                if (DEBUG) {
        -:  791:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  792:                }
        -:  793:
        -:  794:            }
        -:  795:        }
        -:  796:
        -:  797:        //Reset Hand
    #####:  798:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  799:            state->hand[currentPlayer][i] = temphand[i];
    #####:  800:            temphand[i] = -1;
        -:  801:        }
        -:  802:        //Reset Hand
        -:  803:
    #####:  804:        return 0;
        -:  805:
        -:  806:    case gardens:
    #####:  807:        return -1;
        -:  808:
        -:  809:    case mine:
    #####:  810:        return cardEffectMine(currentPlayer, choice1, choice2, state, handPos);
call    0 never executed
        -:  811:
        -:  812:    case remodel:
    #####:  813:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  814:
    #####:  815:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  816:        {
    #####:  817:            return -1;
        -:  818:        }
        -:  819:
    #####:  820:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  821:
        -:  822:        //discard card from hand
    #####:  823:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  824:
        -:  825:        //discard trashed card
    #####:  826:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  827:        {
    #####:  828:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  829:            {
    #####:  830:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  831:                break;
        -:  832:            }
        -:  833:        }
        -:  834:
        -:  835:
    #####:  836:        return 0;
        -:  837:
        -:  838:    case smithy:
        -:  839:        //+3 Cards
    #####:  840:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  841:        {
    #####:  842:            drawCard(currentPlayer, state);
call    0 never executed
        -:  843:        }
        -:  844:
        -:  845:        //discard card from hand
    #####:  846:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  847:        return 0;
        -:  848:
        -:  849:    case village:
        -:  850:        //+1 Card
    #####:  851:        drawCard(currentPlayer, state);
call    0 never executed
        -:  852:
        -:  853:        //+2 Actions
    #####:  854:        state->numActions = state->numActions + 2;
        -:  855:
        -:  856:        //discard played card from hand
    #####:  857:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  858:        return 0;
        -:  859:
        -:  860:    case baron:
    #####:  861:        return cardEffectBaron(choice1, state, currentPlayer, handPos);
call    0 never executed
        -:  862:
        -:  863:    case great_hall:
        -:  864:        //+1 Card
    #####:  865:        drawCard(currentPlayer, state);
call    0 never executed
        -:  866:
        -:  867:        //+1 Actions
    #####:  868:        state->numActions++;
        -:  869:
        -:  870:        //discard card from hand
    #####:  871:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  872:        return 0;
        -:  873:
        -:  874:    case minion:
    #####:  875:        return cardEffectMinion(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
        -:  876:        
        -:  877:    case steward:
    #####:  878:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  879:        {
        -:  880:            //+2 cards
    #####:  881:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  882:            drawCard(currentPlayer, state);
call    0 never executed
        -:  883:        }
    #####:  884:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  885:        {
        -:  886:            //+2 coins
    #####:  887:            state->coins = state->coins + 2;
        -:  888:        }
        -:  889:        else
        -:  890:        {
        -:  891:            //trash 2 cards in hand
    #####:  892:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  893:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  894:        }
        -:  895:
        -:  896:        //discard card from hand
    #####:  897:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  898:        return 0;
        -:  899:
        -:  900:    case tribute:
    #####:  901:        return cardEffectTribute(nextPlayer, state, handPos, currentPlayer);
call    0 never executed
        -:  902:
        -:  903:    case ambassador:
    #####:  904:        return cardEffectAmbassador(choice1, choice2, state, handPos, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:    case cutpurse:
        -:  907:
    #####:  908:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  909:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  910:        {
    #####:  911:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  912:            {
    #####:  913:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  914:                {
    #####:  915:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  916:                    {
    #####:  917:                        discardCard(j, i, state, 0);
call    0 never executed
    #####:  918:                        break;
        -:  919:                    }
    #####:  920:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  921:                    {
    #####:  922:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  923:                        {
        -:  924:                            if (DEBUG)
        -:  925:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  926:                        }
    #####:  927:                        break;
        -:  928:                    }
        -:  929:                }
        -:  930:
        -:  931:            }
        -:  932:
        -:  933:        }
        -:  934:
        -:  935:        //discard played card from hand
    #####:  936:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  937:
    #####:  938:        return 0;
        -:  939:
        -:  940:
        -:  941:    case embargo:
        -:  942:        //+2 Coins
    #####:  943:        state->coins = state->coins + 2;
        -:  944:
        -:  945:        //see if selected pile is in play
    #####:  946:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  947:        {
    #####:  948:            return -1;
        -:  949:        }
        -:  950:
        -:  951:        //add embargo token to selected supply pile
    #####:  952:        state->embargoTokens[choice1]++;
        -:  953:
        -:  954:        //trash card
    #####:  955:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  956:        return 0;
        -:  957:
        -:  958:    case outpost:
        -:  959:        //set outpost flag
    #####:  960:        state->outpostPlayed++;
        -:  961:
        -:  962:        //discard card
    #####:  963:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  964:        return 0;
        -:  965:
        -:  966:    case salvager:
        -:  967:        //+1 buy
    #####:  968:        state->numBuys++;
        -:  969:
    #####:  970:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  971:        {
        -:  972:            //gain coins equal to trashed card
    #####:  973:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  974:            //trash card
    #####:  975:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  976:        }
        -:  977:
        -:  978:        //discard card
    #####:  979:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  980:        return 0;
        -:  981:
        -:  982:    case sea_hag:
    #####:  983:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  984:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  985:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  986:                state->deckCount[i]--;
    #####:  987:                state->discardCount[i]++;
    #####:  988:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  989:            }
        -:  990:        }
    #####:  991:        return 0;
        -:  992:
        -:  993:    case treasure_map:
        -:  994:        //search hand for another treasure_map
    #####:  995:        index = -1;
    #####:  996:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  997:        {
    #####:  998:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:            {
    #####: 1000:                index = i;
    #####: 1001:                break;
        -: 1002:            }
        -: 1003:        }
    #####: 1004:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1005:        {
        -: 1006:            //trash both treasure cards
    #####: 1007:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1008:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1009:
        -: 1010:            //gain 4 Gold cards
    #####: 1011:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:            {
    #####: 1013:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1014:            }
        -: 1015:
        -: 1016:            //return success
    #####: 1017:            return 1;
        -: 1018:        }
        -: 1019:
        -: 1020:        //no second treasure_map found in hand
    #####: 1021:        return -1;
        -: 1022:    }
        -: 1023:
    #####: 1024:    return -1;
        -: 1025:}
        -: 1026:
function discardCard called 10 returned 100% blocks executed 78%
       10: 1027:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1028:{
        -: 1029:
        -: 1030:    //if card is not trashed, added to Played pile
       10: 1031:    if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1032:    {
        -: 1033:        //add card to played pile
    #####: 1034:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1035:        state->playedCardCount++;
        -: 1036:    }
        -: 1037:
        -: 1038:    //set played card to -1
       10: 1039:    state->hand[currentPlayer][handPos] = -1;
        -: 1040:
        -: 1041:    //remove card from player's hand
       10: 1042:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1043:    {
        -: 1044:        //reduce number of cards in hand
    #####: 1045:        state->handCount[currentPlayer]--;
        -: 1046:    }
       10: 1047:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1048:    {
        -: 1049:        //reduce number of cards in hand
        1: 1050:        state->handCount[currentPlayer]--;
        -: 1051:    }
        -: 1052:    else
        -: 1053:    {
        -: 1054:        //replace discarded card with last card in hand
        9: 1055:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1056:        //set last card to -1
        9: 1057:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1058:        //reduce number of cards in hand
        9: 1059:        state->handCount[currentPlayer]--;
        -: 1060:    }
        -: 1061:
       10: 1062:    return 0;
        -: 1063:}
        -: 1064:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1065:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1066:{
        -: 1067:    //Note: supplyPos is enum of choosen card
        -: 1068:
        -: 1069:    //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1070:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1071:    {
    #####: 1072:        return -1;
        -: 1073:    }
        -: 1074:
        -: 1075:    //added card for [whoseTurn] current player:
        -: 1076:    // toFlag = 0 : add to discard
        -: 1077:    // toFlag = 1 : add to deck
        -: 1078:    // toFlag = 2 : add to hand
        -: 1079:
        2: 1080:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1081:    {
    #####: 1082:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1083:        state->deckCount[player]++;
        -: 1084:    }
        2: 1085:    else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1086:    {
    #####: 1087:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1088:        state->handCount[player]++;
        -: 1089:    }
        -: 1090:    else
        -: 1091:    {
        2: 1092:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1093:        state->discardCount[player]++;
        -: 1094:    }
        -: 1095:
        -: 1096:    //decrease number in supply pile
        2: 1097:    state->supplyCount[supplyPos]--;
        -: 1098:
        2: 1099:    return 0;
        -: 1100:}
        -: 1101:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1102:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1103:{
        -: 1104:    int i;
        -: 1105:
        -: 1106:    //reset coin count
        1: 1107:    state->coins = 0;
        -: 1108:
        -: 1109:    //add coins for each Treasure card in player's hand
        6: 1110:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1111:    {
        5: 1112:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1113:        {
        4: 1114:            state->coins += 1;
        -: 1115:        }
        1: 1116:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1117:        {
    #####: 1118:            state->coins += 2;
        -: 1119:        }
        1: 1120:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1121:        {
    #####: 1122:            state->coins += 3;
        -: 1123:        }
        -: 1124:    }
        -: 1125:
        -: 1126:    //add bonus
        1: 1127:    state->coins += bonus;
        -: 1128:
        1: 1129:    return 0;
        -: 1130:}
        -: 1131:
function cardEffectBaron called 0 returned 0% blocks executed 0%
    #####: 1132:int cardEffectBaron(int choice1, struct gameState *state, int currentPlayer, int handPos)
        -: 1133:{
    #####: 1134:    state->numBuys++;
        -: 1135:    
    #####: 1136:    bool addEstate = false;
    #####: 1137:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1138:    // Player chooses to discard Estate
    #####: 1139:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1140:    {
    #####: 1141:        int handSlot = 0;
    #####: 1142:        bool searchHandForEstate = true;
    #####: 1143:        int currentPlayerHandCount = state->handCount[currentPlayer];
        -: 1144:        
    #####: 1145:        while (searchHandForEstate)
branch  0 never executed
branch  1 never executed
        -: 1146:        {
        -: 1147:            // Found Estate
    #####: 1148:            if (state->hand[currentPlayer][handSlot] == estate)
branch  0 never executed
branch  1 never executed
        -: 1149:            {
    #####: 1150:                state->coins += 4;
        -: 1151:                // Discard the Estate in the checked hand slot
    #####: 1152:                state->discard[currentPlayer][state->discardCount[currentPlayer] - 1] = estate;
    #####: 1153:                state->discardCount[currentPlayer]++;
        -: 1154:                
        -: 1155:                // Remake the player's hand without the Estate
    #####: 1156:                while (handSlot < currentPlayerHandCount)
branch  0 never executed
branch  1 never executed
        -: 1157:                {
    #####: 1158:                    state->hand[currentPlayer][handSlot] = state->hand[currentPlayer][handSlot+1];
    #####: 1159:                    handSlot++;
        -: 1160:                }
        -: 1161:                // Empty the last card in hand as to not make duplicates
    #####: 1162:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:                searchHandForEstate = false;
    #####: 1164:                return 0;
        -: 1165:            }
        -: 1166:            // Check next card
        -: 1167:            else 
        -: 1168:            {
    #####: 1169:                handSlot++;
        -: 1170:            }
        -: 1171:            // No more cards to check with no Estate found
    #####: 1172:            if (handSlot > currentPlayerHandCount)
branch  0 never executed
branch  1 never executed
        -: 1173:            {
        -: 1174:                if (DEBUG)
        -: 1175:                {
        -: 1176:                    printf("No Estate cards in your hand; invalid choice\n");
        -: 1177:                    printf("Must gain an Estate if there are any\n");
        -: 1178:                }
    #####: 1179:                searchHandForEstate = false;
    #####: 1180:                addEstate = true;
        -: 1181:            }
        -: 1182:        }
        -: 1183:    }
        -: 1184:    // If player chooses to not discard an Estate or no Estate was found
    #####: 1185:    if (choice1 == false || addEstate == true)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1186:    {
        -: 1187:        // Player gains an Estate if one is available
    #####: 1188:        if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1189:        {
    #####: 1190:            gainCard(estate, state, 1, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1191:            state->supplyCount[estate]--;//Decrement Estates
    #####: 1192:            if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1193:            {
    #####: 1194:                isGameOver(state);
call    0 never executed
        -: 1195:            }
        -: 1196:        }        
        -: 1197:    }
    #####: 1198:    return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
        -: 1202:
        -: 1203:// Minion: choice1 is +2 coins. choice2: discard hand and draw 4 cards; each other player with at least 5 cards does the same.
function cardEffectMinion called 0 returned 0% blocks executed 0%
    #####: 1204:int cardEffectMinion(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos)
        -: 1205:{
    #####: 1206:    state->numActions++;
    #####: 1207:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1208:    
    #####: 1209:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1210:    {
    #####: 1211:        state->coins = state->coins + 2;
        -: 1212:    }
    #####: 1213:    else if (choice2)
branch  0 never executed
branch  1 never executed
        -: 1214:    {
        -: 1215:        // Current player discards hand and draws 4
    #####: 1216:        while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1217:        {
    #####: 1218:            discardCard(0, currentPlayer, state, 0);
call    0 never executed
        -: 1219:        }
        -: 1220:        
    #####: 1221:        for (int i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1222:        {
    #####: 1223:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1224:        }
        -: 1225:        
        -: 1226:        // All other players with handCount >=5 discard hand and draw 4
    #####: 1227:        for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:        {
    #####: 1229:            if (state->handCount[i] >= 5)
branch  0 never executed
branch  1 never executed
        -: 1230:            {
    #####: 1231:                while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1232:                {
    #####: 1233:                    discardCard(0, i, state, 0);
call    0 never executed
        -: 1234:                }
        -: 1235:                
    #####: 1236:                for (int j = 0; j <= 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1237:                {
    #####: 1238:                    drawCard(i, state);
call    0 never executed
        -: 1239:                }
        -: 1240:            }
        -: 1241:        }
        -: 1242:    }
    #####: 1243:    return 0;
        -: 1244:}
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:// Reveal a card from hand. Return up to 2 copies of it from the hand to the Supply. Each other player gains a copy.
        -: 1249:// choice1: which card is revealed
        -: 1250:// choice2: number of cards to return to Supply
function cardEffectAmbassador called 2 returned 100% blocks executed 91%
        2: 1251:int cardEffectAmbassador(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
        -: 1252:{
        -: 1253:    // Check that the card revealed isn't the currently played Ambassador
        2: 1254:    if (choice1 == handPos)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1255:    {
    #####: 1256:        return -1;
        -: 1257:    }
        -: 1258:    // Check for correct number of cards to return
        2: 1259:    if (choice2 < 0 || choice2 > 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1260:    {
    #####: 1261:        return -1;
        -: 1262:    }
        -: 1263:    // Check that number of cards to return matches or exceeds choice2
        2: 1264:    if (choice2 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1265:    {
        2: 1266:        int currentPlayerHandCount = state->handCount[currentPlayer];
        2: 1267:        int returnCount = 0;
        -: 1268:        // Iterate through the hand and make sure those cards exist
        4: 1269:        for (int i = 0; i < currentPlayerHandCount; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1270:        {
        4: 1271:            if (state->hand[currentPlayer][choice1] == state->hand[currentPlayer][i])
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1272:            {
        3: 1273:                returnCount++;
        -: 1274:            }
        4: 1275:            if (returnCount >= choice2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1276:            {
        2: 1277:                break;
        -: 1278:            }
        -: 1279:        }
        -: 1280:        // Not enough cards in hand to match choice
        2: 1281:        if (returnCount < choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:        {
    #####: 1283:            return -1;
        -: 1284:        }
        -: 1285:    }
        -: 1286:
        -: 1287:    
        -: 1288:    if (DEBUG)
        -: 1289:    {
        -: 1290:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1291:    }
        -: 1292:    
        -: 1293:    // Increase supply count for chosen card
        2: 1294:    state->supplyCount[state->hand[currentPlayer][choice1]] -= choice2;
        -: 1295:                
        6: 1296:    for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1297:    {
        4: 1298:        if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1299:        {
        2: 1300:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);                    
call    0 returned 100%
        -: 1301:        }
        -: 1302:    }
        -: 1303:    
        2: 1304:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        2: 1305:    int currentPlayerHandCount = state->handCount[currentPlayer];
        -: 1306:    
        5: 1307:    for (int j = 0; j < choice2; j++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 1308:    {
       15: 1309:        for (int i = 0; i < currentPlayerHandCount; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1310:        {
       12: 1311:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1312:            {
        8: 1313:                discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        -: 1314:            }
        -: 1315:        }
        -: 1316:    }
        -: 1317:    
        2: 1318:    return 0;
        -: 1319:}
        -: 1320:
        -: 1321:
        -: 1322:
        -: 1323:// Shuffle the discard pile into the deck
function shuffleDiscardIntoDeck called 0 returned 0% blocks executed 0%
    #####: 1324:void shuffleDiscardIntoDeck(int player, struct gameState *state)
        -: 1325:{
    #####: 1326:    int discardCount = state->discardCount[player];
    #####: 1327:    for (int i = 0; i < discardCount; i++)
branch  0 never executed
branch  1 never executed
        -: 1328:    {
        -: 1329:        // Move discarded card into deck
    #####: 1330:        state->deck[player][i] = state->discard[player][i];
    #####: 1331:        state->deckCount[player]++;
    #####: 1332:        state->discard[player][i] = -1;
    #####: 1333:        state->discardCount[player]--;
        -: 1334:    }
    #####: 1335:    shuffle(player, state);
call    0 never executed
    #####: 1336:}
        -: 1337:
        -: 1338:// Move top card of deck to discard pile
function discardTopCardFromDeck called 0 returned 0% blocks executed 0%
    #####: 1339:void discardTopCardFromDeck(int player, struct gameState *state)
        -: 1340:{
        -: 1341:    // Get top card slot and next free discard slot
    #####: 1342:    int topCardSlot = state->deckCount[player] - 1;
    #####: 1343:    int discardSlot = state->discardCount[player];
        -: 1344:    // Get enum of top card
    #####: 1345:    int topCard = state->deck[player][topCardSlot];
        -: 1346:    
        -: 1347:    // Put top card into discard pile
    #####: 1348:    state->discard[player][discardSlot] = topCard;
    #####: 1349:    state->discardCount[player]++;
        -: 1350:    // Remove top card from deck
    #####: 1351:    state->deck[player][topCardSlot] = -1;
    #####: 1352:    state->deckCount[player]--;
    #####: 1353:}
        -: 1354:
function cardEffectTribute called 0 returned 0% blocks executed 0%
    #####: 1355:int cardEffectTribute(int nextPlayer, struct gameState *state, int handPos, int currentPlayer)
        -: 1356:{   
    #####: 1357:    int tributeRevealedCards[2] = {-1, -1};   
    #####: 1358:    int nextPlayerDeckCount = state->deckCount[nextPlayer];
    #####: 1359:    int nextPlayerDiscardCount = state->discardCount[nextPlayer];
    #####: 1360:    int nextPlayerCards = nextPlayerDeckCount + nextPlayerDiscardCount;
    #####: 1361:    int tributeSlot = 0;
        -: 1362:    
        -: 1363:    // Corner cases
    #####: 1364:    if (nextPlayerCards <= 1)
branch  0 never executed
branch  1 never executed
        -: 1365:    {
        -: 1366:        // The deck has 1 card
    #####: 1367:        if (nextPlayerDeckCount > 0)
branch  0 never executed
branch  1 never executed
        -: 1368:        {
        -: 1369:            // Add that card to the Tribute array
    #####: 1370:            int topCard = state->deck[nextPlayer][nextPlayerDeckCount - 1];
    #####: 1371:            tributeRevealedCards[tributeSlot] = topCard;
    #####: 1372:            tributeSlot++;
        -: 1373:            // Discard the card
    #####: 1374:            discardTopCardFromDeck(nextPlayer, state);               
call    0 never executed
        -: 1375:        }
        -: 1376:        // The discard pile has 1 card
    #####: 1377:        else if (nextPlayerDiscardCount > 0)
branch  0 never executed
branch  1 never executed
        -: 1378:        {            
    #####: 1379:            tributeRevealedCards[tributeSlot] = state->discard[nextPlayer][0];
    #####: 1380:            tributeSlot++;
        -: 1381:        }
        -: 1382:        else
        -: 1383:        {
        -: 1384:            if (DEBUG)
        -: 1385:            {
        -: 1386:                printf("No cards to reveal\n");
        -: 1387:            }
        -: 1388:        }
        -: 1389:    }
        -: 1390:    
        -: 1391:    else 
        -: 1392:    {
        -: 1393:        // If no cards in deck, shuffle in the discard pile
    #####: 1394:        if (nextPlayerDeckCount == 0)
branch  0 never executed
branch  1 never executed
        -: 1395:        {
    #####: 1396:            shuffleDiscardIntoDeck(nextPlayer, state);
call    0 never executed
        -: 1397:        }
        -: 1398:        // If one card in deck, add first card to array, nextPlayer's discard pile and shuffle it into deck
        -: 1399:        // Helper function to reduce reused code?
        -: 1400:        // Topdeck to discard pile function?
        -: 1401:        // Shuffle discard pile to deck function
    #####: 1402:        else if (nextPlayerDeckCount == 1)
branch  0 never executed
branch  1 never executed
        -: 1403:        {
    #####: 1404:            int topCard = state->deck[nextPlayer][nextPlayerDeckCount - 1];
    #####: 1405:            tributeRevealedCards[tributeSlot] = topCard;
    #####: 1406:            tributeSlot++;
        -: 1407:            // Discard the card and shuffle the discard pile into the deck
    #####: 1408:            discardTopCardFromDeck(nextPlayer, state);            
call    0 never executed
    #####: 1409:            shuffleDiscardIntoDeck(nextPlayer, state);
call    0 never executed
        -: 1410:        }
        -: 1411:                    
        -: 1412:        // Fill up any available tribute slots
    #####: 1413:        for (int i = tributeSlot; i < 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1414:        {
    #####: 1415:            tributeRevealedCards[tributeSlot] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1416:            tributeSlot++;
    #####: 1417:            discardTopCardFromDeck(nextPlayer, state); 
call    0 never executed
        -: 1418:        }
        -: 1419:        // If cards in tribute array are the same, the second is negated
    #####: 1420:        if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1421:        {
    #####: 1422:            tributeRevealedCards[1] = -1;
        -: 1423:        }
        -: 1424:        
        -: 1425:        // Set arrays to check against tributed cards
    #####: 1426:        int treasureCards[] = {copper, silver, gold};
    #####: 1427:        int treasureCardsLen = sizeof(treasureCards) / sizeof(int);
    #####: 1428:        int victoryCards[] = {estate, duchy, province, gardens, great_hall};
    #####: 1429:        int victoryCardsLen = sizeof(victoryCards) / sizeof(int);
    #####: 1430:        bool treasureCard = false;
    #####: 1431:        bool victoryCard = false;
        -: 1432:        
        -: 1433:        // Tally up bonuses for each tributed card
    #####: 1434:        for (int i = 0; i < tributeSlot; i++)
branch  0 never executed
branch  1 never executed
        -: 1435:        {
    #####: 1436:            int checkCard = tributeRevealedCards[i];
        -: 1437:            // Ignore curse cards
    #####: 1438:            if (checkCard == curse)
branch  0 never executed
branch  1 never executed
        -: 1439:            {
    #####: 1440:                continue;
        -: 1441:            }
        -: 1442:            // Check for treasure or victory type
    #####: 1443:            treasureCard = false;
    #####: 1444:            victoryCard = false;
    #####: 1445:            for (int j = 0; j < treasureCardsLen; j++)
branch  0 never executed
branch  1 never executed
        -: 1446:            {
    #####: 1447:                if (checkCard == treasureCards[j])
branch  0 never executed
branch  1 never executed
        -: 1448:                {
    #####: 1449:                    state->coins += 2;
    #####: 1450:                    treasureCard = true;
        -: 1451:                }
        -: 1452:            }
    #####: 1453:            for (int k = 0; k < victoryCardsLen; k++)
branch  0 never executed
branch  1 never executed
        -: 1454:            {
    #####: 1455:                if (checkCard == victoryCards[k])
branch  0 never executed
branch  1 never executed
        -: 1456:                {
    #####: 1457:                    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1458:                    victoryCard = true;
        -: 1459:                }
        -: 1460:            }
        -: 1461:            // Action card if not treasure or victory
    #####: 1462:            if (treasureCard == false && victoryCard == false)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1463:            {
    #####: 1464:                state->numActions = state->numActions + 2;
        -: 1465:            }
        -: 1466:        }
        -: 1467:    }
    #####: 1468:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1469:    return 0;
        -: 1470:}
        -: 1471:
        -: 1472:
        -: 1473:
function cardEffectMine called 0 returned 0% blocks executed 0%
    #####: 1474:int cardEffectMine(int currentPlayer, int choice1, int choice2, struct gameState *state, int handPos)
        -: 1475:{
    #####: 1476:    int chosenCardToTrash = state->hand[currentPlayer][choice1];
    #####: 1477:    int chosenCardToGain = choice2;
        -: 1478:    
        -: 1479:    // Check proper cost between cards to trash and gain
    #####: 1480:    if (getCost(chosenCardToTrash) + 3 <= getCost(chosenCardToGain))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1481:    {
    #####: 1482:        return -1;
        -: 1483:    }
        -: 1484:    
        -: 1485:    // Check both cards to ensure they are both treasures
    #####: 1486:    int treasureCards[] = {copper, silver, gold};
    #####: 1487:    int treasureCardsLen = sizeof(treasureCards) / sizeof(int);
    #####: 1488:    bool validTrash = false;
    #####: 1489:    bool validGain = false;
        -: 1490: 
    #####: 1491:    for (int i = 0; i < treasureCardsLen; i++)
branch  0 never executed
branch  1 never executed
        -: 1492:    {
    #####: 1493:        if (chosenCardToTrash == treasureCards[i])
branch  0 never executed
branch  1 never executed
        -: 1494:        {
    #####: 1495:            validTrash = true;
        -: 1496:        }
    #####: 1497:        if (chosenCardToGain == treasureCards[i])
branch  0 never executed
branch  1 never executed
        -: 1498:        {
    #####: 1499:            validGain = true;
        -: 1500:        }
    #####: 1501:        if (validTrash && validGain)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1502:        {
    #####: 1503:            break;
        -: 1504:        }
        -: 1505:    }
        -: 1506:    // If one card isn't a treasure, return an error
    #####: 1507:    if (validTrash == false || validGain == false)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1508:    {
    #####: 1509:        return -1;
        -: 1510:    }
        -: 1511:    // Add to hand
    #####: 1512:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
    #####: 1513:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1514:    
    #####: 1515:    int currentPlayerHandCount = state->handCount[currentPlayer];
        -: 1516:    // Trash the chosen card to trash
    #####: 1517:    for (int i = 0; i < currentPlayerHandCount; i++)
branch  0 never executed
branch  1 never executed
        -: 1518:    {
    #####: 1519:        if (state->hand[currentPlayer][i] == chosenCardToTrash)
branch  0 never executed
branch  1 never executed
        -: 1520:        {
    #####: 1521:            discardCard(i, currentPlayer, state, 1);
call    0 never executed
        -: 1522:        }
        -: 1523:    }
    #####: 1524:    return 0;
        -: 1525:}
        -: 1526:    
        -: 1527:
        -: 1528:            
        -: 1529:                    
        -: 1530:            
        -: 1531:            
        -: 1532:        
        -: 1533:        
        -: 1534:
        -: 1535://end of dominion.c
