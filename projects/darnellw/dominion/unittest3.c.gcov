        -:    0:Source:unittest3.c
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 86%
        1:    9:int main (){
        -:   10://int minion_function(int choice1, int choice2, int j, struct gameState *state, int handPos, int currentPlayer){
        1:   11:int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, j = 0;
        -:   12:struct gameState G, testG, testK, H;
        1:   13:int numPlayers = 2;
        1:   14:int thisPlayer = 1;
        1:   15:int seed = 1000;
        1:   16:int k[10] = {copper, gold, silver, minion, mine, cutpurse,
        -:   17:			sea_hag, tribute, smithy, council_room};
        1:   18:initializeGame(numPlayers, k, seed, &G);
call    0 returned 1
        1:   19:choice2 = 2;
        1:   20:memcpy(&testG, &G, sizeof(struct gameState));
        -:   21:
        1:   22:printf("%s", "This is the test for the minion card.\n");
call    0 returned 1
        -:   23:
        -:   24://first test to see if the actions are correctly implemented
        1:   25:minion_function(choice1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        1:   26:if (testG.numActions == ++G.numActions){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   27:    printf("%s", "The number of actions was incremented correctly.\n");
call    0 returned 1
        -:   28:}
        -:   29:else {
    #####:   30:    printf("%s", "The number of actions was not incremented correctly.\n");
call    0 never executed
        -:   31:
        -:   32:}
        -:   33:
        -:   34:
        -:   35://change the decision to take the coins
        1:   36:choice1 = 1;
        1:   37:minion_function(choice1, choice2, 0, &testG, handpos, 0);
call    0 returned 1
        -:   38://second test to see if the coins is increased by 2 if the first choice is taken, which reveals the first bug
        -:   39://that I added for the minion function. This test fails because I changed the conditional to not increment the coins.
        1:   40:if (testG.coins == (G.coins + 2)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   41:    printf("%s", "The number of coins was increased correctly.\n");
call    0 never executed
        -:   42:}
        -:   43:else {
        1:   44:    printf("%s", "The number of coins was not increased correctly.\n");
call    0 returned 1
        -:   45:
        -:   46:}
        -:   47:
        -:   48://test case to get into the second half, forgoing the coins.
        -:   49://first test to check if the player whose turn it is discards hand and draws four cards
        1:   50:initializeGame(numPlayers, k, seed, &H);
call    0 returned 1
        1:   51:choice2 = 2;
        1:   52:H.hand[1][0] = copper;
        1:   53:H.hand[1][1] = copper;
        1:   54:H.hand[1][2] = copper;
        1:   55:H.hand[1][3] = copper;
        1:   56:H.hand[1][4] = copper;
        1:   57:H.hand[1][5] = copper;
        1:   58:H.hand[1][6] = copper;
        1:   59:H.hand[1][7] = copper;
        1:   60:memcpy(&testK, &H, sizeof(struct gameState));
        1:   61:choice1 = 0;
        1:   62:choice2 = 1;
        -:   63://this test checks to see if the current player discards his entire hand and then gains exactly four cards
        -:   64://this test finds the other bug that I inserted into this program.
        1:   65:printf("%s""%d", "Current player's handcount before the function is called.", testK.handCount[0]);
call    0 returned 1
        1:   66:printf("%s", "\n");
call    0 returned 1
        1:   67:int pre_call_hand_count = testK.handCount[0];
        1:   68:testK.hand[1][0] = copper;
        1:   69:testK.hand[1][1] = copper;
        1:   70:testK.hand[1][2] = copper;
        1:   71:testK.hand[1][3] = copper;
        1:   72:testK.hand[1][4] = copper;
        1:   73:testK.hand[1][5] = copper;
        1:   74:testK.hand[1][6] = copper;
        1:   75:testK.hand[1][7] = copper;
        -:   76://testK.handCount[1] = 8;
        -:   77:
        1:   78:printf("%s""%d", "Other player's handcount before the function is called.", testK.handCount[1]);
call    0 returned 1
        1:   79:printf("%s", "\n");
call    0 returned 1
        1:   80:int pre_call_hand_count1 = testK.handCount[1];
        1:   81:minion_function(choice1, choice2, 0, &testG, 1, 0);
call    0 returned 1
        1:   82:printf("%s""%d", "Current player's handcount at the end of the round.", testK.handCount[0]);
call    0 returned 1
        1:   83:printf("%s", "\n");
call    0 returned 1
        1:   84:if ((testK.handCount[0] == (pre_call_hand_count - pre_call_hand_count + 4))){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   85:    printf("%s", "The function for the current player is correctly discarding the hand and drawing exactly four cards.\n");
call    0 never executed
        -:   86:
        -:   87:}
        -:   88:else {
        1:   89:    printf("%s", "The function is not working correctly. The player does not have the correct number of cards.\n");
call    0 returned 1
        -:   90:}
        -:   91:
        -:   92:
        -:   93://this second part of the test checks to see if the other players in the round discard their
        -:   94://entire hands and then gain exactly four cards.
        1:   95:printf("%s""%d", "Other player's handcount at the end of the round.", testK.handCount[1]);
call    0 returned 1
        1:   96:printf("%s", "\n");
call    0 returned 1
        1:   97:if ((testK.handCount[1] == (pre_call_hand_count1 - pre_call_hand_count1 + 4))){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   98:    printf("%s", "The function for the other player is correctly discarding the hand and drawing exactly four cards.\n");
call    0 never executed
        -:   99:
        -:  100:}
        -:  101:else {
        1:  102:    printf("%s", "The function is not working correctly. The other player does not have the correct number of cards.\n");
call    0 returned 1
        -:  103:}
        -:  104:
        -:  105:
        -:  106:
        1:  107:return 0;
        -:  108:}
